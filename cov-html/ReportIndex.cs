//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace covhtml {
    using System;
    
    
    public partial class ReportIndex : ReportIndexBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 2 ""
            this.Write("<html>\n<head><title>");
            
            #line default
            #line hidden
            
            #line 3 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.ProjectName ));
            
            #line default
            #line hidden
            
            #line 3 ""
            this.Write(" Code Coverage Report</title>\n<style>\nbody {\n  font-family: sans-serif;\n}\n\nth {\n " +
                    " text-align: left;\n}\n</style>\n\n</head>\n<body>\n<h1>");
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.ProjectName ));
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write("</h1>\n<h2>Code Coverage</h2>\n<table>\n<tr><th>Detail</th><th>Value</th></tr>\n<tr><" +
                    "td>Generator</td><td><a href=\"https://github.com/inorton/XR.Baboon\">XR.Baboon</a" +
                    "></td></tr>\n");
            
            #line default
            #line hidden
            
            #line 21 ""

foreach ( var k in this.metadata.Keys ) {
  if ( !k.StartsWith("match:") ) {

            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("  <tr><td>");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( k ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("</td><td>");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.metadata[k] ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("</td></tr>\n");
            
            #line default
            #line hidden
            
            #line 26 ""

  }
}

            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("</table>\n\n<h2>Patterns</h2>\n<table>\n<tr><th style=\"width:3in\">Pattern</th><th>Lin" +
                    "es Matched</th><th colspan=\"2\">Lines Covered</th></tr>\n");
            
            #line default
            #line hidden
            
            #line 35 ""

foreach ( var k in this.metadata.Keys ) {
  if ( k.StartsWith("match:") ) {
    var patt = this.metadata[k];
    int lines = 0;
    int hits = 0;
    LineMatchCount( patt, out lines, out hits );
    int pct = 0;
    if ( lines > 0 )
    {
      pct = (int)(100 * hits/lines );
    }
      

            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("  <tr><td>");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( patt ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("</td><td>");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( lines ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("</td><td>");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( hits ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("</td><td>");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( pct ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("%</td></tr>\n");
            
            #line default
            #line hidden
            
            #line 50 ""

  }
}

            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write("</table>\n\n<h2>Results</h2>\n<table>\n<tr><th></th><th>Calls</th><th>Lines</th><th>H" +
                    "its</th><th>Coverage</th></tr>\n");
            
            #line default
            #line hidden
            
            #line 59 ""

foreach ( var tname in GetTypes() ) {

            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write("<tr>\n<td colspan=\"4\"><b>");
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( tname ));
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write("</b></td>\n<td align=\"right\">");
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetTypeCoverage(tname) ));
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("%</td>\n</tr>\n");
            
            #line default
            #line hidden
            
            #line 66 ""

  foreach ( var m in GetMembers(tname) ) {
    var cov = GetCoverage(m);
    if ( cov < 0 ) continue;

            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("<tr>\n<td>");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( m.Name ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write("</td>\n<td align=\"right\">");
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( m.CallCount ));
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write("</td>\n<td align=\"right\">");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( m.GetLines().Length ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("</td>\n<td align=\"right\">");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( m.GetHits() ));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write("</td>\n<td align=\"right\">");
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( cov ));
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("%</td>\n</tr>\n<tr>\n<td colspan=\"5\"> \n<table cellpadding=\"0\" cellspacing=\"0\" style=" +
                    "\"width:100%\">\n<tr>\n<td style=\'background:green; height:16px; width:");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( cov  ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("%;\'></td> \n<td style=\'background:red; height:16px; width:");
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( (100 - cov) ));
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write("%;\'></td>\n</tr>\n</table>\n</td></tr>\n \n");
            
            #line default
            #line hidden
            
            #line 88 ""

  }
}

            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write("</body>\n</html>     \n     \n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ReportIndexBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
